# - Try to find MOAB and friends (HDF5, NETCDF, VTK etc)
#
# This will define
#
#  MOAB_DIR            - directory in which MOAB installation resides
#  MOAB_FOUND          - Requested components were found
#  MOAB_INCLUDES       - Includes for all available components
#  MOAB_LIBRARIES      - Libraries for all available components
#
#  MOAB_IMESH_FOUND     - System has iMesh
#  MOAB_IMESH_INCLUDES  - The iMesh include directory
#  MOAB_IMESH_LIBRARIES - Link these to use iMesh
#
# Setting this changes the behavior of the search
#  MOAB_MAKE_FILE - path to moab.make
#  MOAB_IMESH_DEFS_FILE - path to iMesh-Defs.inc
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#

macro (MOAB_PREPARE_CONFIG)
  FIND_PATH (MOAB_CONFIG_DIRECTORY
      NAMES  moab.make moab.config
      HINTS ${MOAB_DIR} ${MOAB_DIR}/lib ${MOAB_DIR}/lib64 ENV
      DOC "MOAB configuration file"
      NO_DEFAULT_PATH)

  find_file (MOAB_MAKE_FILE
      moab.make
      HINTS ${MOAB_CONFIG_DIRECTORY} ${MOAB_DIR}/lib ${MOAB_DIR}/lib64 ENV
      DOC "MOAB configuration file")

  find_file (MOAB_IMESH_DEFS_FILE
      iMesh-Defs.inc
      HINTS ${MOAB_CONFIG_DIRECTORY} ${MOAB_DIR}/itaps/imesh ${MOAB_DIR}/lib ${MOAB_DIR}/lib64 ENV
      DOC "MOAB iMesh Component configuration file")

  FIND_PATH (MOAB_TOOLS_DIR
      NAMES mbmem.cpp
      HINTS ${MOAB_DIR}/tools ENV
      DOC "MOAB tools directory - if using source directory"
      ${MOAB_DIR}/tools)

  FIND_PATH (MOAB_BIN_DIR
      NAMES mbsize mbconvert mbmem
      HINTS ${MOAB_DIR}/bin ${MOAB_TOOLS_DIR} ENV
      DOC "MOAB bin directory - if using install directory"
      ${MOAB_DIR}/bin)

  mark_as_advanced (MOAB_IMESH_DEFS_FILE MOAB_MAKE_FILE MOAB_TOOLS_DIR MOAB_BIN_DIR)

endmacro (MOAB_PREPARE_CONFIG)

# MOAB_PREPARE_AUX_LIB(MBCOUPLER mbcoupler mbcoupler_test)
macro (MOAB_PREPARE_AUX_LIB component name ) #testexe)
  find_library(MOAB_${component}_LIBRARIES
    NAMES ${name} lib${name}
    HINTS ${MOAB_CONFIG_DIRECTORY} ${MOAB_DIR}/lib ${MOAB_DIR}/lib64 ${MOAB_TOOLS_DIR}/${name}/.libs ENV
    DOC "MOAB-${component} library file location")
  mark_as_advanced (MOAB_${component}_LIBRARIES)
  message ("MOAB additional library [${component}_LIBRARIES]: ${MOAB_${component}_LIBRARIES}")
  set (MOAB_${component}_FOUND YES CACHE INTERNAL "Cleared" FORCE)
  mark_as_advanced (MOAB_${component}_FOUND)
endmacro (MOAB_PREPARE_AUX_LIB)

macro (MOAB_GET_VARIABLE makefile name var)
  set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
  execute_process (COMMAND ${CMAKE_BUILD_TOOL} -f ${${makefile}} show VARIABLE=${name}
    OUTPUT_VARIABLE ${var}
    RESULT_VARIABLE moab_return)
endmacro (MOAB_GET_VARIABLE)

macro (MOAB_TEST_RUNS component name includes libraries program runs)
  # message (STATUS "Starting run test: ${includes} ${libraries} ${runs}")
  MULTIPASS_CXX_SOURCE_RUNS ("${includes}" "${libraries}" "${program}" ${runs})
  #message ("linking with resolved libraries: ${libraries}")
  #set (${runs} "YES" CACHE INTERNAL "Cleared" FORCE)
  if (NOT MOAB_${component}_EXECUTABLE_RUNS)
    set (MOAB_${component}_EXECUTABLE_RUNS "${${runs}}" CACHE BOOL
      "Can the system successfully run an ${name} executable?  This variable can be manually set to \"YES\" to force CMake to accept a given configuration, but this will almost always result in a broken build." FORCE)
  endif ()
endmacro (MOAB_TEST_RUNS)

macro (MOAB_REQUIRED_LIBS component name includes libraries_all program libraries_required)
  resolve_libraries (_all_libraries "${libraries_all}")
  message ("trying program: ${program} ${_all_libraries}")
  MOAB_TEST_RUNS (${component} ${name} "${includes}" "${_all_libraries}" "${program}" ${name}_works_extra)
  if (${name}_works_extra)
    set (${libraries_required} "${_all_libraries}")
    message (STATUS "${name} executable requires linking to extra libs, this probably means it's statically linked.")
  else ()
    # for now, use the same and let the user deal with what is missing.
    set (${libraries_required} "${_all_libraries}")
    message (STATUS "${name} could not be used, maybe the install is broken.")
  endif (${name}_works_extra)
endmacro ()

include (ResolveCompilerPaths)
macro (MOAB_GET_ALL_VARIABLES _name _component)
  string (TOUPPER ${_name} name)
  string (TOUPPER ${_component} component)

  # A temporary makefile to probe this MOAB components's configuration
  set (moab_config_makefile "${CMAKE_CURRENT_BINARY_DIR}/Makefile.${name}")
  file (WRITE ${moab_config_makefile}
      "## This file was autogenerated by FindMOAB.cmake
include ${MOAB_${component}_DEFS_FILE}
include ${MOAB_MAKE_FILE}
show :
	-@echo -n \${\${VARIABLE}}")
  MOAB_GET_VARIABLE (moab_config_makefile IMESH_INCLUDEDIR   moab_includedir0)
  MOAB_GET_VARIABLE (moab_config_makefile IMESH_INCLUDEDIR2  moab_includedir1)
  MOAB_GET_VARIABLE (moab_config_makefile IMESH_LIBS         imesh_libs)
  MOAB_GET_VARIABLE (moab_config_makefile MOAB_CXXFLAGS      moab_cxxflags)
  MOAB_GET_VARIABLE (moab_config_makefile MOAB_CFLAGS        moab_cflags)
  MOAB_GET_VARIABLE (moab_config_makefile MOAB_INCLUDES      moab_includedir2)
  MOAB_GET_VARIABLE (moab_config_makefile MOAB_LIBDIR        moab_libdir)
  MOAB_GET_VARIABLE (moab_config_makefile MOAB_LIBS_LINK     moab_libs2)
  file (REMOVE ${moab_config_makefile})
  SET(tmp_includes "-I${moab_includedir0} ${moab_includedir1} ${moab_includedir2}")
  #message ("Trying to resolve the raw includes list = ${tmp_includes}")
  resolve_includes(MOAB_INCLUDES "${tmp_includes}")
  #message ("Found all include directories = ${MOAB_INCLUDES}")
  SET(tmp_libs "-L${moab_libdir} -l${_component} -lMOAB ${imesh_libs} ${moab_libs2}")
  #message ("Trying to resolve the raw libraries list = ${tmp_libs}")
  resolve_libraries (MOAB_LIBRARIES "${tmp_libs}")
  # message ("Found all linkage libraries resolved = ${MOAB_LIBRARIES}")

endmacro (MOAB_GET_ALL_VARIABLES)

set (MOAB_DIR "MOAB_DIR-NOTFOUND" CACHE STRING "MOAB installation directory")
#set (MOAB_FOUND NO CACHE INTERNAL "Found MOAB, iMesh, MBCoupler components successfully." )
set (moab_config_current CACHE INTERNAL "Do we need to reconfigure ?")

include (FindPackageMultipass)
find_package_multipass (MOAB moab_config_current
  STATES DIR
  DEPENDENTS INCLUDES LIBRARIES)

if(${moab_config_current} MATCHES NO AND NOT ${MOAB_DIR} MATCHES "MOAB_DIR-NOTFOUND")

  MOAB_PREPARE_CONFIG()

  MOAB_GET_ALL_VARIABLES(moab iMesh)
  # check if programs compile with iMesh and MOAB libraries
  MOAB_REQUIRED_LIBS ("MOAB" "MOAB" "${MOAB_INCLUDES}" "${MOAB_LIBRARIES}" "
  /* MOAB test program */
  #include \"moab/Core.hpp\"
  int main(int argc,char *argv[]) {
    moab::Core *mb = new moab::Core();
    delete mb;
    return 0;
  }
  " tmp_moab_required_libs)

  MOAB_REQUIRED_LIBS ("IMESH" "iMesh" "${MOAB_INCLUDES}" "${MOAB_LIBRARIES}" "
  /* iMesh test program */
  #include <iMesh.h>
  #define CHK(err) if (err) return 1
  int main(int argc,char *argv[]) {
    int err;
    iMesh_Instance m;
    iMesh_newMesh(\"\",&m,&err,0);CHK(err);
    iMesh_dtor(m,&err);CHK(err);
    return 0;
  }
  " tmp_imesh_required_libs)
  IF(tmp_imesh_required_libs)
    SET(MOAB_IMESH_FOUND YES)
  ENDIF(tmp_imesh_required_libs)

  find_path (imesh_include_tmp iMeshP.h HINTS ${MOAB_INCLUDES} NO_DEFAULT_PATH)
  if (imesh_include_tmp)
    set (MOAB_MESH_HAS_PARALLEL "YES")
  else ()
    set (MOAB_MESH_HAS_PARALLEL "NO")
  endif ()
  set (imesh_include_tmp "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)

  MOAB_PREPARE_AUX_LIB(MBCOUPLER mbcoupler ) # mbcoupler_test)
  # MOAB_PREPARE_TOOLS(MBPART MBPart mbpart)

  SET(MOAB_FIND_COMPONENTS IMESH MBCOUPLER)
  foreach (component ${MOAB_FIND_COMPONENTS})
    mark_as_advanced (MOAB_${component}_EXECUTABLE_RUNS MOAB_${component}_LIBRARIES)
    if (MOAB_${component}_INCLUDES)
      SET (MOAB_INCLUDES ${MOAB_${component}_INCLUDES} ${MOAB_INCLUDES})
    endif ()
    if (MOAB_${component}_LIBRARIES)
      list(APPEND moab_component_libs ${MOAB_${component}_LIBRARIES})
    endif ()
  endforeach()
  LIST (REMOVE_DUPLICATES MOAB_INCLUDES)
  set(MOAB_LIBRARIES ${moab_component_libs} ${MOAB_LIBRARIES})
  LIST (REMOVE_DUPLICATES MOAB_LIBRARIES)

  IF(MOAB_INCLUDES)
    IF(MOAB_LIBRARIES)
      set (_MOAB_NUM_FOUND 0 CACHE INTERNAL "Cleared" FORCE)
      foreach (component ${MOAB_FIND_COMPONENTS})
          message (STATUS "Checking configuration for ${component} ::")
        if (MOAB_${component}_FOUND)
          math(EXPR _MOAB_NUM_FOUND "${_MOAB_NUM_FOUND} + 1")
          message (STATUS " -- ${component} found ::")
        endif()
      endforeach()
      IF (${_MOAB_NUM_FOUND} EQUAL 2)
        set (MOAB_FOUND YES)
        MARK_AS_ADVANCED(MOAB_FOUND)
        set (MOAB_EXECUTABLE_RUNS ${MOAB_IMESH_EXECUTABLE_RUNS} CACHE BOOL
      "Can the system successfully run a MOAB executable?  This variable can be manually set to \"YES\" to force CMake to accept a given MOAB configuration, but this will almost always result in a broken build." FORCE)
      ENDIF()
      set (MOAB_INCLUDES ${MOAB_INCLUDES} CACHE STRING "MOAB Include directories")
      set (MOAB_LIBRARIES ${MOAB_LIBRARIES} CACHE STRING "MOAB Libraries and dependencies")

      mark_as_advanced (MOAB_EXECUTABLE_RUNS)
      mark_as_advanced (MOAB_INCLUDES)
      mark_as_advanced (MOAB_LIBRARIES)
    ELSE(MOAB_LIBRARIES)
      message("Finding MOAB libraries failed, please try to set the var MOAB_DIR")
    ENDIF(MOAB_LIBRARIES)
  ELSE(MOAB_INCLUDES)
    message("Finding MOAB includes failed, please try to set the var MOAB_DIR")
  ENDIF(MOAB_INCLUDES)

endif(${moab_config_current} MATCHES NO AND NOT ${MOAB_DIR} MATCHES "MOAB_DIR-NOTFOUND")

message (STATUS "    MOAB Configuration ::")
message (STATUS "        VERSION   : ${MOAB_VERSION}")
message (STATUS "        INCLUDES  : ${MOAB_INCLUDES}")
message (STATUS "        LIBRARIES : ${MOAB_LIBRARIES}")

include (FindPackageHandleStandardArgs)
find_package_handle_standard_args (MOAB "MOAB not found, check environment variables MOAB_DIR"
  MOAB_DIR MOAB_INCLUDES MOAB_LIBRARIES MOAB_EXECUTABLE_RUNS)
