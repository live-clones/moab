Source: moab
Priority: extra
Maintainer: Vijay Mahadevan <vijay.m@gmail.com>
Uploaders: Nico Schl√∂mer <nico.schloemer@gmail.com>, Jason Kraftcheck <kraftche@cae.wisc.edu>
Build-Depends: debhelper (>= 9),
  cmake (>= 3.1.0),
  doxygen,
  g++ (>= 5.0.0),
  gfortran,
  libblas-dev,
  liblapack-dev,
  libmetis-dev,
  libeigen3-dev,
  libhdf5-mpich-dev
Standards-Version: 3.9.8
Section: libs
Homepage: http://sigma.mcs.anl.gov/moab-library/

Package: libmoab-dev
Section: libdevel
Architecture: any
Depends: libmoab0 (= ${binary:Version}), ${misc:Depends}
Description: Mesh-Oriented datABase development files
  MOAB is a component for representing and evaluating mesh data. 
  MOAB can store structured and unstructured mesh, consisting of 
  elements in the finite element "zoo". The functional 
  interface to MOAB is simple yet powerful, allowing the 
  representation of many types of metadata commonly found on the 
  mesh. MOAB is optimized for efficiency in space and time, based 
  on access to mesh in chunks rather than through individual
  entities, while also versatile enough to support individual 
  entity access.

Package: libmoab0
Section: libs
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libmetis-dev, libhdf5-mpi-dev
Description: Mesh-Oriented datABase libraries
  MOAB is a component for representing and evaluating mesh data.
  MOAB can store structured and unstructured mesh, consisting of
  elements in the finite element "zoo". The functional
  interface to MOAB is simple yet powerful, allowing the
  representation of many types of metadata commonly found on the
  mesh. MOAB is optimized for efficiency in space and time, based
  on access to mesh in chunks rather than through individual
  entities, while also versatile enough to support individual
  entity access.

Package: moab-bin
Section: libs
Architecture: any
Depends: libmoab0, ${misc:Depends}
Description: Mesh-Oriented datABase utilities
  MOAB is a component for representing and evaluating mesh data.
  MOAB can store structured and unstructured mesh, consisting of
  elements in the finite element "zoo". The functional
  interface to MOAB is simple yet powerful, allowing the
  representation of many types of metadata commonly found on the
  mesh. MOAB is optimized for efficiency in space and time, based
  on access to mesh in chunks rather than through individual
  entities, while also versatile enough to support individual
  entity access.
