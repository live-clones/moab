Version 4.0.1:
* Fix zoltan build on case-insensitive file systems (e.g. MacOS)
* Fix netcdf build w/ required HDF5 in non-system path

Version 4.0:
* Many improvements to parallel correctness and efficiency
* Use of MPIO for parallel read of HDF5-based file format
* Parallel import of file formats utilizing internal communication and/or partial read of files.
* Partial read of HDF5-based files
* Import files from: ABAQUS, IDEAS, MCNP5, NASTRAN, Sms, TetGen, Star-CCM+
* String-based file options for controlling format-specific file options (see README.IO for a 
  list of options.)
* Mesh refinement tool
* Compact storage of structured mesh data
* Variable-length tag data
* Alternate, cmake-based build system
* Support for most recent ITAPS APIs
* New data coupling tool
* Python API based on ITAPS APIs
* Many performance improvements (both runtime and memory), including entity sets, dense tag data, 
  bit tag data, skinning, and entity deletion.
* MOAB namespace 
* Fixed bug in get_entities_by_type_and_tag for cases with non-zero
  input set which has or doesn't have entities

Version 3.0.0 (SVN tag 3.0.0):
- Updated QVDual to work with new versions of VTK and removed
dependence on graphviz
- Move ITAPS/TSTT interface implementation into tools/iMesh and make
it work with configure system
- Implement new version number system
- Incorporate DagMC library (does fast facet-based
ray tracing) into tools/dagmc
- Prefer g++ to pgCC in configure scripts
- Many improvements in kd tree functionality, performance
- Move entity sets to be stored in sequences, better performance &
functionality
- Improved various file writers/readers, including:
. Better performance of HDF5 file reader
. Configuration with/without HDF5, netcdf
. Vtk writer improvements
- Added functions to MBInterface to get memory usage of MOAB
- Fixes to various MBCN functions for 64-bit builds
- Small changes to #defines of some tag names in MBTagConventions.hpp


Version 2.00 (CVS tag version_200):
- New MBInterface method to get blocked coordinate data for vertices.
- Speed up reading of entity sets in .h5m files.
- Store sets in entity sequences
- Remove use of virtual functions from MBMeshSet
- Add API for quering total and break-down of memory use by MOAB.
- Add initial Adaptive kD-tree implementation.
- Add upper_bound method for MBRange.
- Make parallel configuration (MPI rank and size) per-MOAB-instance values,
  and add utility methods for querying/manipulating processor ID portion
  of entity handles.
- Fix allocation of handles such that they are allocated with the 
  correct processor ID for parallel 
- Remove MPI calls from MOAB constructor.  Make paralle config (MPI
  rank and size) arguments to the MOAB constuctor.
- Separate type definitions from interface definitions.  MBEntityType.h 
  contains the definition of MBEntityType and MBTypes.h contains the
  definitions of all other types and includes MBEntityType.h.  MBInterface 
  now includes MBTypes.h rather than MBCN.hpp so some applications using
  MBCN.hpp may have to add an explicit include.
- Add methods to MBRange to check if all contained entities are of a given
  type or dimension
- Change internal storage of entity set parent/child lists so that we have
  better behavior parent/child links become stale (don't try to delete/deref
  stale pointers.)
- Add lower_bound, upper_bound, equal_range methods that accept an MBEntityType
  as input to MBRange.
- Add front, back, pop_front and pop_back methods to MBRange
- Change internal MBRange::PairNode definition so that the 
  MBRange::const_pair_iterator::operator->() works correctly.
- Added 'bool' value to tag_create, defaulting to false.  When true, tag_create
  will return MB_SUCCESS if the tag already exists *and* matches the tag
  creation parameters.
- Fixed bugs saving/restoring of mesh and default values for tags containing 
  MBEntityHandles to/from HDF5 files.
- Allow special case null (zero) value for MBEntityHandle tags in HDF5 files
- Added processor rank to entity handle, right below entity type and above id
fields; width of this field is computed at initialization, and depends on the
number of processors being used.  On serial versions, zero bits are used so
handles are as before.
- Added option to specify requested start id and processor id when creating
a mesh set.
- Added functionality (in MBParallelComm class) for passing mesh between processors.
- Corrected set-related functions when inputting '0' (which is taken to mean 
the interface set, i.e. the whole mesh); in this case, one can't add parent/child
sets, but one can request them (return no sets in that case)
- Added functions to support tag semantics 
- Added num_hops argument for num_child_meshsets and num_parent_meshsets.
- Removed default value for default value in tag_create function (this
argument was making the choice between overloaded versions of this
function ambiguous)
- Fixed bug in MBCN::NumSubEntities when input d=0 (i.e. vertices)
- Changed arguments to get_connectivity to take const MBEntityHandle* and size
instead of std::vector, so single MBEntityHandle can be used as input
- Added version of get_connectivity which returns results in an MBRange, 
for convenience of calling code needing to do range-based logic
- Added std::string MBInterface::get_error_string(const MBErrorCode) const, which
returns a string for the error code passed in (usually just a string representation
of the error code enum)
- Added MBRange variants of get_parent_meshsets, get_child_meshsets
- Added list_entity function to MBInterface
- Fix bug writing global/default values for tags containing entity handles
   to HDF5 files when using 64-bit handles.
- Fix bugs in VTK I/O for structured mesh, polygons, quadratic elements, and
   bit tags.

Version 1.01 (CVS tag version_101): 
New Capabilities:
- Added support for polygons/polyhedra; polyhedra represented by
storing polygon handles as connectivity array, otherwise poly elements
similar to other entities in MOAB
- Added DualTool, to compute mesh dual, and for hex meshes, dual
surfaces/curves
- Added support for new HDF5-based native MOAB reader/writer; this is
the only format capable of storing any data represented in MOAB
- Added writers for GMV, SLAC, Vtk (limited), and also a template for
constructing new mesh writers WriteTemplate
- Added tools/converter tool for mesh format conversion to/from any of
the formats supported by MOAB
- Added support for dynamically adding readers/writers and dynamically
testing whether any in the list can read/write a given file; required
substantial additions to MBWriteUtil
- Added MBInterface::tag_get_default_value
- Added MBRange functions subtract, lowerBound, operator+=, operator-=
- Added rudimentary mesh joining capability, and a test for that to
MBTest
- Added "categories" tag, which represent broad category types on
entity sets; used e.g. to indicate a set represents geometric
vertex/edge/face/region, dual surface/curve, etc.; currently only
supported by .cub file reader

Bug Fixes/Rearrangements:
- Fixed bug getting up-adjacencies from entities having equivalent entities; 
some adjacencies were being missed.
- Fixed a bug in set_connectivity, where old vertices were put on the
end of a scratch array instead of the beginning; symptom showed up as
old vertices still being adjacent to the element whose connectivity
was being set.
- Changed error returned when tag_delete_data called for entity which can't be found,
from MB_TAG_NOT_FOUND to MB_ENTITY_NOT_FOUND
- Fixed bug in tag_get_tags, where tag handles weren't passed back properly
- Improved efficiency of MOAB's TSTT mesh interface implementation in
various ways
- Extensive changes to performance tests (in test/perf) to test MOAB
performance compared to that of cubit and of MOAB TSTT mesh interface
- When requesting entities with a tag value equal to the (defined)
default value for that tag, entities not having a tag are returned in
the list
- Move conventional tag names from MBInterface.hpp into
MBTagConventions.hpp
- renamed MBCN::SubEntityConn to MBCN::SubEntityVertexIndices, and added
new function MBCN::SubEntityConn, which returns the actual
connectivity of a subentity given the parent connectivity, and the
subentity dimension and index

Version 1.00: 
Initial release (woo-hoo!)
